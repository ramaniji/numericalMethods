 /*************************************************************************
 
 			
 			
 			 numerical.mac 
 			 
 			 
 			 
 
 ************************************************************************/
 
 
 
 
 /************************************************************************
 
 			COPYRIGHT NOTICE


    
    
    
Copyright (C) 2022 J V Ramani  
         
    
    
This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or 
(at your option) any later version. 

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
See the GNU General Public License  for more details at
http://www.gnu.org/copyleft/gpl.html


For comments, suggestions and the like, feel free to contact the author at

		ramaniji AT yahoo DOT com
    
    
    
    
    
************************************************************************/







/***********************************************************************


  How to load this package
   
(%i1) load(numerical);


**********************************************************************/





/**********************************************************************




 numerical.mac is a package of Maxima functions for numerical methods:
 
 
 1. bisection method
 2. newton method
 3. secant method
 4. regula-falsi method
 5. lu factorization
 6. jacobi method
 7. sor method
 8. gauss-seidel method
 9. lagrange interpolation
 10. newton interpoalation
 11. trapezoidal rule
 12. simpson rule
 13. euler method
 14. second-order runge-kutta methods
 
 
 
 
 
 ********************************************************************/






/*******************************************************************************************************************************


   
(%i1) bisect(x^3-2*sin(x),   x,   0.50,   2.00,   20,   0.0005);


*******************************************************************************************************************************/



 
 
 
 
bisect(g,   x,   a,   b,   kmax,   e):=block
(
 
 	    [ya,  yb,  ym,  err,  iter,  m,   k,   numer:true],
 	    local(f),
 	    
	    define(f(x),   g),
	    ya:f(a),
	    yb:f(b),
	    
	    if(signum(ya)=signum(yb)) then ( print("fn has same sign at end points"))
	    else
	    (
	        disp("iter                       m                                    ym                          error"),
	        err:(b-a),
	        for k:1 thru kmax do
	        (
	            err:err/2,
	            m:a+err,
	            ym:f(m),
	            iter:k,
	            print(iter, "                     ", m, "                ", float(ym),"              ", err),
	            if(abs(err)<e) then (return("bisection has converged") ),
	            if(signum(ym) # signum(ya)) then ( b:m, yb:ym )
	            else (a:m,  ya:ym)
	        )
	    
	    )
);


/***********************************************************************


   
(%i1) newton(x^3-2*x^2+x-3,   x,    3.0,  0.0001,  0.00001,   8);



**********************************************************************/

newton(g,   x,   x0,   e,  d,  Nmax):=block
(
	    [p,  x1,   i,   numer:true],
	    local(f,  df),
	    
	    define(f(x),   g),
	    define(df(x),  diff(f(x),  x)),
	    for i:1 thru Nmax do
	    (
	        if(abs(df(x0)) < d) then (return("small derivative")),
	        p:f(x0)/df(x0),
	        x1:x0-p,
	        print(i,  "      ",  x1, "          ", f(x1)),
	        if(abs(p)<e) then (return("convergence")),
	        x0:x1    
	    )
);



/***********************************************************************


   
(%i1) secant(x^3+2*x^2-3*x-1,   x,    -2.0,  -3.0,  0.00001,   10);



**********************************************************************/


secant(g,   x,   a,   b,   e,  Nmax):=block
(
	    [fa,  fb,  d,  t,  t1,  i,   numer:true],
	    local(f), 
	    
	    define(f(x),   g),
	    fa:f(a),
	    fb:f(b),
	    if(abs(fa) >abs(fb)) then (t:a, a:b, b:t, t1:fa, fa:fb, fb:t1), 
	    print("0       ", a, "       ", fa),
	    print("1       ", b, "        ",  fb),
	    for i:2 thru Nmax do
	    (
	        if(abs(fa) >abs(fb)) then (t:a, a:b, b:t, t1:fa, fa:fb, fb:t1),
	        d:(b-a)/(fb-fa),
	        b:a,
	        fb:fa,
	        d:d*fa,
	        if(abs(d)<e)then(return("convergence")),
	        a:a-d,
	        fa:f(a),
	        print(i, "     ", a, "     ",  fa)
	    )
);


/****************************************************************************************************



   
(%i1) regula(x^3+2*x^2-3*x-1,   x,    1.0,  2.0,  20,   0.0005);



****************************************************************************************************/


regula(g,    x,    a,   b,  kmax,   e):=block
(   		
	    [ya,  yb,  ym,   m,  k,  iter,  numer:true],
	    local(f),
	    
	    define(f(x),   g),
	    ya:f(a),
	    yb:f(b),
	    if(signum(ya)=signum(yb))then( print("fn has same sign at end points"))
	    else
	    (
	        disp("iter                       m                                         ym  "),
	        for k:1 thru kmax do
	        (
	            m:b-(yb*(b-a)/(yb-ya)),
	            ym:f(m),
	            iter:k,
	            print(iter, "                     ", m, "                ", float(ym) ),
	            if(abs(float(ym))<e)then( return("regula falsi method has converged") ),
	            if(signum(ym) # signum(ya)) then ( b:m, yb:ym )
	            else (a:m,  ya:ym)
	        )
	    
	    )
);


/**********************************************************************************************



   
(%i1) A:matrix([1,   2,   3],  [3,   5,   7],   [4,   6,   9]);
	luFactor(A);
	luFactor(A)[1];
	


**********************************************************************************************/


luFactor(A):=block
(
	    [n,   L,  U,  i,   j,    k,  ans,   numer:true],
	    n:matrix_size(A)[1], 
	    
	    L:zeromatrix(n,   n),
	    U:zeromatrix(n,   n),
	    for k:1 thru n do 
	    (
	        L[k][k]:1,
	        for j:k thru n do
	        (
	            U[k][j]:A[k][j]-(sum(L[k][s]*U[s][j],   s,   1,   k-1))
	        ),
	        for i:k+1 thru n do
	        (
	            L[i][k]:(A[i][k]-sum(L[i][s]*U[s][k],    s,   1,   k-1))/U[k][k]
	        )
	    ),
	    ans:['L=L,   'U=U]
	   
);


/***********************************************************************


   
(%i1) A:matrix([1,   2,   3],  [3,   5,   7],   [4,   6,   9]);
	b:matrix([1],  [2],  [3]);
	solve_by_lu(A,    b);
	


**********************************************************************/


solve_by_lu(A,    b):=block
(
	    [n,    L,   U,   z,   x,  ans1,   i,    j,   k,    numer:true],
	    n:matrix_size(A)[1],

	     
	    L:rhs(luFactor(A)[1]),
	    U:rhs(luFactor(A)[2]),
	    z:zeromatrix(n,    1),
	    x:zeromatrix(n,    1),
	    
	    z[1]:b[1],
	    for i:2 thru n do
	    (
	        z[i]:b[i]-sum(L[i][j]*z[j],    j,    1,   i-1)
	    ),
	
	    x[n]:z[n]/U[n][n],
	    for k:n-1 thru 1 step -1 do
	    (
	        x[k]:(z[k]-sum(U[k][j]*x[j],    j,   k+1,    n))/U[k][k]
	    ),
	    
	    ans1:['z=z,  'x=x ]            
);


/***********************************************************************


   
(%i1) A1:matrix([5,    1,   2],  [-3,    9,    4], [1,   2,   -7]);
	b1:matrix([10],   [-14],   [-33]);
	start:matrix([0.0],   [0.0],   [0.0]);
	gauss_jacobi(A1,   b1,   start,   14);
	


**********************************************************************/


gauss_jacobi(A,   b,    init,    iter):=block
(
	    
	    [i,  j,  n,  l,  L,  u,  U,  d,   D,  D1,   Tgj,  cgj,   x0,  x1,   numer:true],
	    n:matrix_size(A)[1],
	   
	    
	    for i:1 thru n do
	    (
	        for j:1 thru n do
	        (
	            if(i > j) then (l[i,   j]:A[i,  j])
	            else ( l[i,   j]:0)
	        )
	    ),
	    L:genmatrix(l,   n,   n),
	    for i:1 thru n do
	    (
	        for j:1 thru n do
	        (
	            if(i < j) then (u[i,   j]:A[i,  j])
	            else ( u[i,   j]:0)
	        )
	    ),
	    U:genmatrix(u,   n,   n),
	    for i:1 thru n do
	    (
	        for j:1 thru n do
	        (
	            if(i = j) then (d[i,   j]:A[i,  j])
	            else ( d[i,   j]:0)
	        )
	    ),
	    
	    D:genmatrix(d,   n,   n),
	    D1:invert(D),
	    Tgj:D1.(-L-U),
	    cgj:D1.b,
	    
	    
	    x0:init,
	    for i:1 thru iter do 
	    (
	        x1:Tgj.x0+cgj,
	        disp(i, "----", transpose(x1)), 
	        x0:x1
	    )
);


/***********************************************************************



   
(%i1) A:matrix([5,    1,   2],  [-3,    9,    4], [1,   2,   -7]);
	b:matrix([10],   [-14],   [-33]);
	start:matrix([0.0],   [0.0],   [0.0]);
	sor(A,   b,   0.9,   start,   10); 
	


**********************************************************************/


sor(A,   b,  w,   init,    iter):=block
(

	    [i,  j,   n,  l,   u,  L,  U,   d,   D,  D3,  N,  Tsor,  csor,  x0,   x1,   numer:true],
	    n:matrix_size(A)[1],
	    
	    for i:1 thru n do
	    (
	        for j:1 thru n do
	        (
	            if(i > j) then (l[i,   j]:A[i,  j])
	            else ( l[i,   j]:0)
	        )
	    ),
	    L:genmatrix(l,   n,   n),
	    
	    for i:1 thru n do
	    (
	        for j:1 thru n do
	        (
	            if(i < j) then (u[i,   j]:A[i,  j])
	            else ( u[i,   j]:0)
	        )
	    ),
	    U:genmatrix(u,   n,   n),
	    
	    for i:1 thru n do
	    (
	        for j:1 thru n do
	        (
	            if(i = j) then (d[i,   j]:A[i,  j])
	            else ( d[i,   j]:0)
	        )
	    ),
	    D:genmatrix(d,   n,   n),
	    
	    D3:invert((1/w)*D+L),
	    N:((1/w)-1)*D-U,
	    Tsor:D3.N,
	    csor:D3.b,
	    
	    x0:init,
	    for i:1 thru iter do 
	    (
	        x1:Tsor.x0+csor,
	        disp(i, "----", transpose(x1)),
	        x0:x1
	    )
);


/***********************************************************************



   
(%i1) A1:matrix([5,    1,   2],  [-3,    9,    4], [1,   2,   -7]);
	b1:matrix([10],   [-14],   [-33]);
	start:matrix([0.0],   [0.0],   [0.0]);
	gauss_seidel(A1,    b1,   start,   10);
	



**********************************************************************/


gauss_seidel(A,    b,   init,    iter):=block
(

	    [i,   j,   n,   l,   L,   u,   U,   d,   D,   D2,   Tgs,  cgs,  x0,  x1,   numer:true],
	    n:matrix_size(A)[1],

	    
	    for i:1 thru n do
	    (
	        for j:1 thru n do
	        (
	            if(i > j) then (l[i,   j]:A[i,  j])
	            else ( l[i,   j]:0)
	        )
	    ),
	    L:genmatrix(l,   n,   n),
	    
	    for i:1 thru n do
	    (
	        for j:1 thru n do
	        (
	            if(i < j) then (u[i,   j]:A[i,  j])
	            else ( u[i,   j]:0)
	        )
	    ),
	    U:genmatrix(u,   n,   n),
	    
	    for i:1 thru n do
	    (
	        for j:1 thru n do
	        (
	            if(i = j) then (d[i,   j]:A[i,  j])
	            else ( d[i,   j]:0)
	        )
	    ),
	    D:genmatrix(d,   n,   n),
	    
	    D2:invert(D+L),
	    Tgs:D2.(-U),
	    cgs:D2.b,
	    
	    
	    x0:init,  
	    for i:1 thru iter do 
	    (
	        x1:Tgs.x0+cgs,
	        disp(i, "----", transpose(x1)),
	        x0:x1
	    )
);


/***********************************************************************************



   
(%i1) LP([0,   1,    -1,    2,    -2],    [-5,  -3,   -15,   39,   -9],    x);
      LP([0,   1,    -1,    2,    -2],    [-5,  -3,   -15,   39,   -9],   3);
      
      


**********************************************************************************/


LP(a,   f,   x):=block
(
	    [n,   i,   s,   k,   numer:true],
	    
	    local(L),
	    n:length(a),
	    L(i,  x):=block
	    (
	    	[temp,   j],
	        temp:1,
	        for j:1 thru n do ( if(j#i) then temp:temp*(x-a[j])/(a[i]-a[j]) ),
	        return(temp)    
	    ),
	    
	    s:0,
	    for k:1 thru n do s:s+(L(k,   x)*f[k]),
	    return(s)
);


/**************************************************************************************



   
(%i1) dd_table([-1,  0,   1,   2,  -2,   3],   [5,   1,    1,    11,   5,   35]);




**************************************************************************************/

dd_table(a,   f):=block
(
	    [i,  j,   n,  s,  A,  table,   k,   p,   numer:true],
	    n:length(a),
	    local(A),
	    
	    
	    for i:1 thru n do A[i,  1]:a[i],
	    for k:1 thru n do A[k,  2]:f[k],
	    
	    s:0,
	    for j:3 thru n+1 do 
	    (
	        for p:1 thru n+2-j do A[p,    j]:(A[p+1,   j-1]-A[p,   j-1])/(A[p+1+s,   1]-A[p,   1]),
	        s:s+1
	    ),
	    table:genmatrix(A,   n,   n+1),   
	    table
);

/******************************************************************************************************



   
(%i1) NP([-1,  0,   1,   2,    -2,    3],    [5,   1,    1,    11,   5,    35],    x);
      NP([-1,  0,   1,   2,    -2,    3],    [5,   1,    1,    11,   5,    35],    1.5);



******************************************************************************************************/


NP(a,    f,   x):=block
(
	    
	        [i,   j,   s,   A,   table,   n,  s1,   k,   p,   numer:true],
	        n:length(a),
	        local(A),
	        
	        for i:1 thru n do A[i,  1]:a[i],
	        for k:1 thru n do A[k,  2]:f[k],
	        s:0,
	        for j:3 thru n+1 do 
	        (
	            for p:1 thru n+2-j do A[p,    j]:(A[p+1,   j-1]-A[p,   j-1])/(A[p+1+s,   1]-A[p,   1]),
	            s:s+1
	        ),
	        table:genmatrix(A,   n,   n+1),
	        
	        s1:table[1,   2],
	        for i:3 thru n+1 do 
	        (
	            s1:s1+( table[1,   i]*product((x-table[k,   1]),    k,     1,     i-2)     )
	        ),
	        return(s1)
);


/***********************************************************************


   
(%i1)  T(1/x,    x,   1.0,    2.0);
	


**********************************************************************/


T(g,   x,   a,   b):=block
(
	    [numer:true],
	    local(f),
	    
	    
	    define(f(x),    g),
	    return(((b-a)/2)*(f(a)+f(b)))
);


/***********************************************************************


   
(%i1) for k:2 next 2*k thru 150 do block(
    	temp:Tc(sin(x),   0,   %pi,   k),
    	print(k, "      ", temp)
    	);



**********************************************************************/



Tc(g,   x,   a,   b,   n):=block
(
	    [h,  s,  i,  ans,   numer:true],
	    local(f),
	    
	    define(f(x),    g),
	    h:(b-a)/n,
	    s:0.0,
	    for i:1 thru n-1 do s:s+f(a+i*h),
	    ans:(h/2)*(f(a)+2*s+f(b)),
	    return(float(ans))
);


/***********************************************************************


   
(%i1)  S(1/x,    x,   1.0,    2.0);
	



**********************************************************************/


S(g,   x,    a,   b):=block
(
	    [numer:true],
	    local(f),
	    
	    define(f(x),    g),
	    return( ((b-a)/6)*(f(a)+ (4*f((a+b)/2)) + f(b)))
);


/***********************************************************************


   
(%i1) for k:2 next 2*k thru 150 do block(
    	temp:Sc(sin(x),   0,   %pi,   k),
    	print(k, "      ", temp)
    	);


**********************************************************************/

Sc(g,   x,   a,   b,   n):=block
(
	    [m,   h,   odd,   even,  i,  ans,  j,   numer:true],
	    m:n/2,
	    local(f),
	    
	    define(f(x),    g),
	    h:(b-a)/n,
	    odd:0.0,
	    even:0.0,
	    for i:1 thru m-1 do even:even+f(a+(2*i)*h),
	    for j:1 thru m do odd:odd+f(a+(2*j-1)*h),
	    ans:(h/3)*(f(a)+4*odd+2*even+f(b)),
	    return(float(ans))
);



/***********************************************************************


   
(%i1) eulerm(1+(x/t),   t,    x,   1,   1,   6,    10);



**********************************************************************/


eulerm(g,    t,    x,    a,     x0,    b,    N):=block
(
	    [h,   t0,    sol,   numer:true],
	    local(f),
	    
	    define(f(t,   x),    g),
	    t0:a,
	    h:(b-a)/N,
	    x:x0,
            sol:[],
	    while(t0<=b) do
	    (
                sol:endcons([t0,   x],    sol),
                x:x+(h*f(t0,   x)),
                t0:t0+h      
	    ),
            sol
);



/***********************************************************************


   
(%i1) eulermod(1+(x/t),    t,    x,    1,     1,    6,    10);



**********************************************************************/


eulermod(g,    t,    x,    a,     x0,    b,    N):=block
(
	    [h,   t0,   w,    wt,   sol,    numer:true],
	    local(f),
	    
	    define(f(t,   x),    g),
	    t0:a,
	    h:(b-a)/N,
	    w:x0,
            sol:[],
	    while(t0<=b) do
	    (
	        sol:endcons([t0,   w],    sol),
	        wt:w+((h/2)*f(t0,   w)),
	        w:w+(h*f(t0+(h/2),   wt)),
	        t0:t0+h
	    ),
            sol
);


/***********************************************************************


   
(%i1) heun(1+(x/t),    t,    x,  1,     1,    6,    10);



**********************************************************************/


heun(g,    t,    x,    a,     x0,    b,    N):=block
(
	    [h,   t0,   w,    wt,    sol,   numer:true],
	    local(f),

	    
	    define(f(t,   x),    g),
	    t0:a,
	    h:(b-a)/N,
	    w:x0,
            sol:[],
	    while(t0<=b) do
	    (
	        sol:endcons([t0,   w],    sol),
	        wt:w+(h*f(t0,   w)),
	        w:w+(h/2)*(f(t0,   w)+f(t0+h,   wt)),
	        t0:t0+h
	    ),
            sol
);


/***********************************************************************


   
(%i1) rk2(1+(x/t),    t,    x,   1,     1,    6,    10);



**********************************************************************/



rk2(g,    t,     x,    a,     x0,    b,    N):=block
(
        [h,   t0,   w,    wt,   sol,     numer:true],
        local(f),
        
        define(f(t,   x),    g),
        t0:a,
        h:(b-a)/N,
        w:x0,
        sol:[],
        while(t0<=b) do
        (
            sol:endcons([t0,   w],    sol),
            wt:w+((2*h/3)*f(t0,   w)),
            w:w+(h/4)*f(t0,   w)+(3*h/4)*f(t0+(2*h/3),    wt),
            t0:t0+h
        ),
        sol
);


